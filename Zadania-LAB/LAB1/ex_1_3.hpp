#pragma once
#include "glew.h"
#include <GLFW/glfw3.h>
#include "glm.hpp"

#include "Shader_Loader.h"
#include "Render_Utils.h"

GLuint program; // Shader ID

GLuint quadVAO; 
GLuint rombVAO;

Core::Shader_Loader shaderLoader;

// W tym programie bêdziemy korzystaæ z indeksownia
// Poniewa¿ tworzenie ró¿nego rodzaju kszta³tów bêdzie bardzo nieefektywne stosujac same punkty. Poniewa¿ punkty bêd¹ siê niejednokrotnie powielaæ! REDUNDANCJA DANCYH/PAMIÊCI!
// Dlatego te¿ zdecydowanie lepiej równie¿ utworzyæ specjaln¹ tablicê ideksów - pokazuj¹c¹ jakie punkty tworz¹ jeden trójk¹t :) mocno to oszczêdza iloœæ zajmowanego miesjca w pamiêci. Indeksujemy nasze punkty od 0!


void renderScene(GLFWwindow* window)
{
    glClearColor(0.0f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    
    glUseProgram(program); // Aktywowanie shadera
    //wywolaj funkcje drawVAOIndexed na quadVAO 
    Core::drawVAOIndexed(quadVAO, 6);//argumemty(ID VAO , ileWierchDoNarysowania=iloœæ Indeksów)
    Core::drawVAOIndexed(rombVAO, 6);
    glUseProgram(0); // Wylaczenie shadera

    glfwSwapBuffers(window);
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

void init(GLFWwindow* window) {
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    program = shaderLoader.CreateProgram("shaders/shader_1_1.vert", "shaders/shader_1_1.frag");

    //Stworz czworokat przy uzyciu 4 wierzcholkow i 6 indeksow (typ: const int []) zaladuj go do za pomoca initVAOIndexed do quadVAO
    const float tab[]{
        0.8f , 0.0f , 0.0f , 1.0f,
        -0.8f , 0.0f , 0.0f , 1.0f,
        -0.8f , -0.8f, 0.0f , 1.0f,
        0.8f , -0.8f, 0.0f, 1.0f
    };

    const unsigned int indx[]{
        0,1,3, //indeksujemy nasze punkty od zera!
        1,2,3
    };
    quadVAO = Core::initVAOIndexed(tab,indx,4,4,6); //argumenty(tablicaWierzch , tablicaIndeksów, IloœæWierz w 1Tablicy, 4(liczby okreœlaj¹ce punkt/wierzch) , iloœæIndeksów w 2Tablicy) UWAGA! - jeœli chodzi o iloœæ wierzcho³ków to jest to zawsze iloœæ dos³ownych wiechrzo³ków jakie widzi komputer! Czyli Prostok¹t - dla komputera dwa trójk¹ty - kazdy po 3 wierzcho³ki - razem maj¹ 6 wierzcho³ków!

    const float rombTab[]{
        0.0f, 0.7f, 0.0f, 1.0f,
        -0.5f, 0.5f , 0.0f, 1.0f,
        0.0f, 0.3f, 0.0f, 1.0f,
        0.5f, 0.5f, 0.0f, 1.0f
    };

    const unsigned int rombIndex[] = { // Kolejnoœæ punktów w tablicy jest równie¿ istotna!
        0,1,2,    //Dziêki tej kolejnoœci OpenGL okreœla orientacjê œcian!
        2,3,0     //Domyœlnie punkty powinny byæ zorientowane w kierunku przeciwnym do ruchu wskazówek zegara!
    };//indeksujemy nasze punkty od zera!
    rombVAO = Core::initVAOIndexed(rombTab, rombIndex, 4, 4, 6);

}

void shutdown(GLFWwindow* window)
{
    shaderLoader.DeleteProgram(program);
}


//obsluga wejscia
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// funkcja jest glowna petla
void renderLoop(GLFWwindow* window) {
    while (!glfwWindowShouldClose(window))
    {
        processInput(window);

        renderScene(window);
        glfwPollEvents();
    }
}
//}